#!/usr/bin/env bash

SERVER_DIR="$(git rev-parse --show-toplevel)/project/server"
HTTP_SERVER_NAME=http-server
SSL_DAEMON_NAME=ssl-daemon

SCRIPTS_DIR="${SERVER_DIR}/res/scripts"
source "${SCRIPTS_DIR}/common" # Add the functions in 'common'
source "${SCRIPTS_DIR}/build" # Add the functions in 'build'
source "${SCRIPTS_DIR}/start" # Add the functions in 'start'

testDaemon() {
    message $'\nTesting SSL Daemon...\n'
    cd "${DAEMON_TEST_DIR}"
    ctest --output-on-failure
}

testHttpServer() {
    message $'\nTesting HTTP Server...\n'
    cd "${HTTP_SERVER_TEST_DIR}"
    ctest --output-on-failure
}

test() {
    HTTP_SERVER_TEST_DIR="${SERVER_DIR}/build/${HTTP_SERVER_NAME}/test"
    DAEMON_TEST_DIR="${SERVER_DIR}/build/${SSL_DAEMON_NAME}/test"

    testHttpServer
    testDaemon
}

usage() {
    echo "USAGE"
    echo "    $0 <OPTION>"
    echo
    echo "OPTIONS"
    echo "    --help  | -h  Print this help menu and exit"
    echo "    --start | -a  Start the Elevation server"
    echo "    --stop  | -o  Stop the Elevation server"
    echo "    --build | -b  Build the Elevation server"
    echo "    --test  | -t  Run all automated tests"
}

runScript() {
    if [ $# != 1 ]; then
        usage
    else
        case $1 in

        -h | --help)
            usage
            ;;

        -a |--start)
            start
            ;;

        -o | --stop)
            stop
            ;;

        -b | --build)
            build
            ;;

        -t | --test)
            test
            ;;

        *)
            echo "Invalid option '$1'"
            echo
            usage
            exit 1
            ;;

        esac
    fi
}

runScript "$@"
