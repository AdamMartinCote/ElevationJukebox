#!/usr/bin/env bash

SERVER_DIR="$(git rev-parse --show-toplevel)/project/server"
SCRIPTS_DIR="${SERVER_DIR}/res/scripts"
source "${SCRIPTS_DIR}/build" # Add the functions in 'build'

obtainSQLite() {
    # SQLite does not have a Git repository ; wget the tarball instead
    cd "${DEPS_DIR}"
    if [ ! -e "sqlite3/sqlite.tar.gz" ]; then
        mkdir -p sqlite3
        cd sqlite3
        wget https://www.sqlite.org/src/tarball/sqlite.tar.gz
        tar xzf sqlite.tar.gz
        mv sqlite/* .
        rmdir sqlite
    fi
}

obtainDependencies() {
    message $'\nObtaining dependencies, this should take 3-10 minutes if they are not already there...\n'

    # Obtain submodules
    git submodule update --init --recursive

    # Obtain SQLite
    obtainSQLite
}

buildPistache() {
    local SOURCE_DIR="${DEPS_DIR}/pistache"
    local BINARY_DIR="${DEPS_DIR}/pistache/build"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/cmake/pistache"
    local BUILD_TYPE=Debug

    buildWithCMake "pistache" "${SOURCE_DIR}" "${BINARY_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${BUILD_TYPE}"
}

buildOpenSsl() {
    local SOURCE_DIR="${DEPS_DIR}/openssl"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libssl.a"
    local CONFIGURE=config
    local OPEN_SSL_CERTIFICATE_DIR="${SERVER_BINARY_DIR}/ssl"
    local EXTRA_ARGS="--openssldir=${OPEN_SSL_CERTIFICATE_DIR}"
    local INSTALL_TARGET=install_sw

    buildWithConfigure "openssl" "${SOURCE_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${CONFIGURE}" "${EXTRA_ARGS}" "${INSTALL_TARGET}"
}

buildTagLib() {
    local SOURCE_DIR="${DEPS_DIR}/taglib"
    local BINARY_DIR="${DEPS_DIR}/taglib/build"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libtag.a"
    local BUILD_TYPE=Release

    buildWithCMake "taglib" "${SOURCE_DIR}" "${BINARY_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${BUILD_TYPE}"
}

buildZLib() {
    local SOURCE_DIR="${DEPS_DIR}/zlib"
    local BINARY_DIR="${DEPS_DIR}/zlib/build"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libz.a"
    local BUILD_TYPE=Release

    buildWithCMake "zlib" "${SOURCE_DIR}" "${BINARY_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${BUILD_TYPE}"
}

buildSqlite3() {
    local SOURCE_DIR="${DEPS_DIR}/sqlite3"
    local INSTALL_DIR="${DEPS_INSTALL_DIR}"
    local BUILT_FLAG="${DEPS_INSTALL_DIR}/lib/libsqlite3.a"
    local CONFIGURE=configure
    local SQLITE3_INCLUDE_DIR="${INSTALL_DIR}/include/sqlite3"
    local EXTRA_ARGS="--includedir=${SQLITE3_INCLUDE_DIR}"
    local INSTALL_TARGET=install

    buildWithConfigure "sqlite3" "${SOURCE_DIR}" "${INSTALL_DIR}" "${BUILT_FLAG}" "${CONFIGURE}" "${EXTRA_ARGS}" "${INSTALL_TARGET}"
}

buildDependencies() {
    local DEPS_DIR="${SERVER_DIR}/lib"
    local DEPS_INSTALL_DIR="${SERVER_DIR}/build/dependencies"

    obtainDependencies
    mkdir -p "${DEPS_INSTALL_DIR}"
    buildOpenSsl
    buildPistache
    buildZLib # REQUIRED BY TAGLIB
    buildTagLib
    buildSqlite3
}

buildServer() {
    local SERVER_BINARY_DIR="${SERVER_DIR}/build"
    mkdir -p "${SERVER_BINARY_DIR}"

    buildDependencies
    cd "${SERVER_BINARY_DIR}"
    cmake -DCMAKE_BUILD_TYPE=Debug ../src
    make -j$(getCoreCount)
}

buildServer
